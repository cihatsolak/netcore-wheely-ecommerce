// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wheely.Data.Concrete.Contexts;

namespace Wheely.Data.Concrete.Migrations
{
    [DbContext(typeof(WheelDbContext))]
    [Migration("20211031210348_ChangeEntityTableName")]
    partial class ChangeEntityTableName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CategoryWheel", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("WheelsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "WheelsId");

                    b.HasIndex("WheelsId");

                    b.ToTable("CategoryWheel");
                });

            modelBuilder.Entity("ColorWheel", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<int>("WheelsId")
                        .HasColumnType("integer");

                    b.HasKey("ColorsId", "WheelsId");

                    b.HasIndex("WheelsId");

                    b.ToTable("ColorWheel");
                });

            modelBuilder.Entity("DimensionWheel", b =>
                {
                    b.Property<int>("DimensionsId")
                        .HasColumnType("integer");

                    b.Property<int>("WheelsId")
                        .HasColumnType("integer");

                    b.HasKey("DimensionsId", "WheelsId");

                    b.HasIndex("WheelsId");

                    b.ToTable("DimensionWheel");
                });

            modelBuilder.Entity("TagWheel", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.Property<int>("WheelsId")
                        .HasColumnType("integer");

                    b.HasKey("TagsId", "WheelsId");

                    b.HasIndex("WheelsId");

                    b.ToTable("TagWheel");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Colors.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("HexCode")
                        .IsUnique();

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Comments.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("StarCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("WheelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WheelId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Dimensions.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Size")
                        .IsUnique();

                    b.ToTable("Dimension");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Pictures.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("WheelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WheelId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Producers.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Routes.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Routes.RouteValueTransform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CustomUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("SlugUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique();

                    b.HasIndex("ModuleId");

                    b.HasIndex("SlugUrl")
                        .IsUnique();

                    b.ToTable("RouteValueTransform");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Wheels.Wheel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CampaignPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("StarCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("ProducerId");

                    b.ToTable("Wheel");
                });

            modelBuilder.Entity("CategoryWheel", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", null)
                        .WithMany()
                        .HasForeignKey("WheelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorWheel", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Colors.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", null)
                        .WithMany()
                        .HasForeignKey("WheelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DimensionWheel", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Dimensions.Dimension", null)
                        .WithMany()
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", null)
                        .WithMany()
                        .HasForeignKey("WheelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagWheel", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", null)
                        .WithMany()
                        .HasForeignKey("WheelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Comments.Comment", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", "Wheel")
                        .WithMany("Comments")
                        .HasForeignKey("WheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wheel");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Pictures.Picture", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Wheels.Wheel", "Wheel")
                        .WithMany("Pictures")
                        .HasForeignKey("WheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wheel");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Routes.RouteValueTransform", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Routes.Module", "Module")
                        .WithMany("RouteValueTransforms")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Wheels.Wheel", b =>
                {
                    b.HasOne("Wheely.Core.Entities.Concrete.Producers.Producer", "Producer")
                        .WithMany("Wheels")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Producers.Producer", b =>
                {
                    b.Navigation("Wheels");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Routes.Module", b =>
                {
                    b.Navigation("RouteValueTransforms");
                });

            modelBuilder.Entity("Wheely.Core.Entities.Concrete.Wheels.Wheel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
